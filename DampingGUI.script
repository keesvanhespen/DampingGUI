//Script to compute pulsatility values and flow velocity curves from 4D PCA images.

//Written by:
//Kees van Hespen, UMC Utrecht, The Netherlands

Interface{
  Parameters {
    Field progress{type = double
      value = 0
      max   = 1 }
    Field anonymization_tag{type=String }
    Field savetext {type=String value = ""}
    Field prbar_loading_images {type = Double value=0}
    Field prbar_pulsatility{type = Double value=0}  
    Field dicom_folder_location{type=String }
    Field Outputlog{type=String value=""}
    Field subfoldersave {type = Bool value=False}
    Field override_splitdicoms {type = Bool value=False}
    Field overlayswitch {type = Bool value=True}
    Field velocity_component{type= Int value=1}
    Field currenttab{type=Int value=0}
    Field currenttabMPR{type=Int value=0}
    Field currenttabplots{type=Int value=0}
    Field fileName{ type=String value=""}
    Field Warning{ type=String value=""}
    Field Use_variable_FWHM {type=Bool value = True}
    Field leftright{type = Enum       
      items {
        item Left { title = "left" }
        item Right { title = "right" }
      }}
    Field Cname{type=Int value=0}
    Field manual_mffe1{type=string value=""}
    Field manual_mffe2{type=string value=""}
    Field manual_mffe3{type=string value=""}
    Field manual_mpca1{type=string value=""}
    Field manual_mpca2{type=string value=""}
    Field manual_mpca3{type=string value=""}
    Field manual_ppca1{type=string value=""}
    Field manual_ppca2{type=string value=""}
    Field manual_ppca3{type=string value=""}
    Field Loaded_results_loc{type = string value=""}

    
  }
}


Window Main{ title = "Analysis tool for 4D PCA image data, by Kees van Hespen, UMC Utrecht (C)"
  
  shouldCloseCommand = shouldClose
  
  TabView {name = TabViewInvisible
    currentIndexField = currenttab
    style {
      disabledColors {
        tabText = gray
      }
    }
    Category "Import PCA Images"{  

      Box{
        droppedFileCommand = @@py: init(); ctx.field("FileInformation1.path").value  = args[0]; ctx.field("Loaded_results_loc").value  = ctx.field("FileInformation1.dirname").value; ctx.field("DirectDicomImport2.dplImport").touch(); ctx.field("FileListFilterPlugin.const0").setValue(ctx.field("DicomFrameTagInfo4.zExt").value);check_dropped_image() @@
        Table{
          Row{
            Box{ title=Magnitude 
              Panel{ module = Load_split_dicoms.Magnitude} 
              colspan = 1 
              expandY = True
            }
            Box Options{ 
              title   = "" 
              expandY = False
              Box "Bias field correction and phase unwrapping"{
                Horizontal{
                  Button{title = "Perform image corrections" command = image_corrections dependsOn = Load_split_dicoms.output0}
                  CheckBox Load_split_dicoms.StringUtils6.boolResult {title = "Using corrected scans" editable = False}
                }
              }
              Box "Image registration"{
                Horizontal{
                  Button {title = "Open registration" dependsOn = StringUtils11.boolResult command = "*py: ctx.module("MERIT").showDefaultPanel()*"}
                  Button  {command  = apply_image_registration title="Save registration results" dependsOn = MERIT.isRegistrationCompleted}
                  Button {title = "Inspect registration results" command = "*py: ctx.module("ViewRegistrationResults").showDefaultPanel()*"}
                }
              }
              Box "Load options"{
                Horizontal{
                  Button {title ="Manual load images" command="*py: window = ctx.showWindow("Manualload")*"}
                  CheckBox override_splitdicoms {title = "Ignore existing ML output" dependsOn = Load_split_dicoms.output0}
                }
              }
              HyperText { maximumHeight = 80
                text = "*<h3>Controls:</h3>
        <li> - <b>Mouse2</b>: Window/level
        <li> - <b>Mouse3 (scroll)</b>: Scroll through slices
       *"} 
              
            }
            
            Box{ title=T1w 
              Panel{ module = Load_split_dicoms.T1w} 
              colspan            = 1
              droppedFileCommand = @@py: ctx.module('Load_split_dicoms').field("ImageLoad1.filename").value  = args[0]; magnitude = ctx.module("Load_split_dicoms").field("OrthoReformat3.output1").image(); magnitude = magnitude.getTile( (0, 0, 0, 0, 0, 0), (magnitude.UseImageExtent, magnitude.UseImageExtent, magnitude.UseImageExtent, magnitude.UseImageExtent, magnitude.UseImageExtent, magnitude.UseImageExtent)); interface = ctx.module("Load_split_dicoms").module("PythonImage1").call("getInterface"); interface.setImage(magnitude, minMaxValues = (np.min(magnitude), np.max(magnitude)), voxelToWorldMatrix = ctx.module("Load_split_dicoms").field("Info1.worldMatrix").value); get_LUT_set_LUT();ctx.module("DTF_path_and_MPR").field("XMarkerListContainer.deleteAll").touch(); ctx.module("Start_end_marker_selection").field("XMarkerListContainer.deleteAll").touch(); ctx.module("Start_end_marker_selection").field("XMarkerListContainer1.deleteAll").touch(); ctx.module("Start_end_marker_selection").field("XMarkerListContainer2.deleteAll").touch();ctx.module("Render_Centerline").field("Vesselness.update").touch();ctx.module("Render_Centerline").field("DtfSkeletonization.update").touch()  @@ 
              dependsOn          = Load_split_dicoms.output0
              CheckBox BoolArithmetic.inputBool2 {title = "Override: use T1W"}
            } 
          }
          Row{
            Box{ title=Right-Left 
              Panel{ module = Load_split_dicoms.RL}
              CheckBox Load_split_dicoms.InvertPhaseRL {title = "Invert Phase RL"}
            }
            Box{ title=Feet-Head 
              Panel{ module = Load_split_dicoms.FH}
              CheckBox Load_split_dicoms.InvertPhaseFH {title = "Invert Phase FH"}
            }
            Box{ title=Anterior-Posterior 
              Panel{ module = Load_split_dicoms.AP}
              CheckBox Load_split_dicoms.InvertPhaseAP {title = "Invert Phase AP"}
            }
          }
        }
      
      }
      Horizontal { 
        HyperText {maxh =28 maxw=195 text = "Loading and splitting dicoms:"} 
        ProgressBar prbar_loading_images{}      
      }
      
      Button {alignX = Right title = "Help!" style{colors {button=#2B3E47 buttonText = whitesmoke } titleFont {weight = Bold}}
        command = "*py: import webbrowser; webbrowser.open_new(r'file:'+ctx.module("Select_Vessels_3D_Viewer").localPath()+'/README.pdf') *"}
      
      //FieldListener SoLUTEditor.colorPoints {command = setDTFthreshold}
      FieldListener SegmentationVisualization.Bypass3.noBypass {command = "*py:ctx.module("Select_Vessels_3D_Viewer").field("WEMIsoSurface.startTaskSynchronous").touch();ctx.module("Measurements_3D_Viewer").field("WEMIsoSurface.startTaskSynchronous").touch() *" }
      FieldListener BoolArithmetic.inputBool2 {command = "*py:get_LUT_set_LUT();ctx.module("DTF_path_and_MPR").field("XMarkerListContainer.deleteAll").touch(); ctx.module("Start_end_marker_selection").field("XMarkerListContainer.deleteAll").touch(); ctx.module("Start_end_marker_selection").field("XMarkerListContainer1.deleteAll").touch(); ctx.module("Start_end_marker_selection").field("XMarkerListContainer2.deleteAll").touch();ctx.module("Render_Centerline").field("Vesselness.update").touch();ctx.module("Render_Centerline").field("DtfSkeletonization.update").touch() *"}
      FieldListener Load_split_dicoms.BoolInt2.boolValue {command = apply_phase_inversion}
      FieldListener Load_split_dicoms.BoolInt1.boolValue {command = apply_phase_inversion}
      FieldListener Load_split_dicoms.BoolInt.boolValue {command = apply_phase_inversion}
    }
    Category "Center line tracking"{
      Horizontal{ 
        Panel { module = VesselViewer  window = _viewer minimumWidth = 800} 
        Vertical{
          Box "Visualization options"{ 
            Panel {module = SoLUTEditor  window = Panel panel = alphaEditor}
            Horizontal {
              Checkbox SegmentationVisualization.Bypass3.noBypass {title = "Show vessel segmentation" }
              CheckBox Start_end_marker_selection.BoolInt.boolValue {title="Show selection skeleton"}
              Checkbox SkullStrip.ApplySkullStrip{title = "Skull strip" } 
            } 
            
          }
          Box "Pulsatility computation"{
            Horizontal{
              Button {title="Compute Pulsatility" command = "*py: contourcreation();*" dependsOn = Bypass.output0 }   
              Button Start_end_marker_selection.So3DMarkerEditor.deleteAll{title="Delete all markers" dependsOn = Start_end_marker_selection.XMarkerListContainer1.numItems command = delete_all_markers}
              Button {title="Experimental options" command="*py: window = ctx.showWindow("experimentaloptions")*"}
              Button {title = "Create manual vessel mask" command = "*py: ctx.showWindow("Draw");*"}
            }

          }
          Box "Load"{            

            Field Loaded_results_loc{title = "Load results: " browseButton = Yes browseFilter = "Result dicom files (*.dcm)" browseSelectedCommand = load_results}             
            Field Render_Centerline.itkImageFileReader.fileName{title = "Load manual mask: " browseButton = Yes browseFilter = "ManualMask (*.nii)" browseSelectedCommand = "*py: ctx.module("Render_Centerline").field("DtfSkeletonization.update").touch()*"}  
            
          }
          Horizontal { 
            HyperText {maxh =28 maxw=195 text = "Computation progress:"} 
            ProgressBar prbar_pulsatility{}      
          }
          HyperText {maximumHeight = 140
            text = "*<h3>Controls:</h3>
        <li> - <b>Mouse1</b>: Rotate
        <li> - <b>Mouse3 (click)</b>: Drag
        <li> - <b>Mouse3 (scroll)</b>: Zoom
        <li> - <b>Alt</b>: Show selection skeleton if checkbox is True
        <li> - <b>Alt + Mouse1</b>: (De)select point on selection skeleton or vessel
       *"} 
        } expandY=True
      } expandY=True
    }
    Category "View Pulsatility" { 
      tabDependsOn = Magnitude_velocity_viewers.CSO_creation.output0 
      Horizontal{
        Panel{module = MeasurementsViewer window=_viewer minimumWidth = 800} expandY=True
        Vertical{
          Box "Visualization options"{
            Horizontal{
              CheckBox  overlayswitch{title = "Overlay velocity map" }
              CheckBox Render_Pulsatility_spheres.FieldBypass4.inputNumber{title = "Sphere size as pulsatility"}
              CheckBox Render_Pulsatility_spheres.FieldBypass3.inputNumber {title = "Show pulsatility values"}
              CheckBox SegmentationVisualization.MPRPath1.showUpVectors {title = "Show MPR orientation"}
              
            }
            Horizontal { 
              Checkbox SegmentationVisualization.Bypass3.noBypass{title = "Show vessel segmentation"}
            }
          }
          Box "Anatomical location current slice"{
            Horizontal{
              Box{
                maxw = 150
                RadioButtonGroup leftright{ orientation = Horizontal
                  items {
                    item Left{title = "Left"}
                    item Right {title = "Right"}
                  }
                }
              }
              Box{ 
                Horizontal{
                  RadioButtonGroup Cname{ orientation = Horizontal
                    items {
                      item 1{title = "C1"}
                      item 2 {title = "C2"}
                      item 3{title = "C3"}
                      item 4 {title = "C4"}  
                      item 5{title = "C5"}
                      item 6 {title = "C6"}
                      item 7 {title = "C7"}
                    }
                  }
                  Button {command = autofill title = "Autofill"} 
                }
              }
            }
          }

          FieldListener SegmentationVisualization.MPRPath1.showUpVectors {command = "*py: ctx.module("Magnitude_velocity_viewers").field("Show_upvector.SoBypass2_bypass").setValue(ctx.module("SegmentationVisualization").field("MPRPath1.showUpVectors").value)*"}               
          FieldListener velocity_component {command = "*py: plot_velocity_curve();plot_all_slice_velocities();get_all_slice_values(); plot_values_as_annotations()*"} 
          FieldListener Magnitude_velocity_viewers.MPR_magnitude.startSlice{command = "*py: plot_velocity_curve();get_anatomical_locations();ctx.module("Magnitude_velocity_viewers").field("annoReadPix.voxelPosition").setValue([0,0,0]); plot_values_as_annotations() *"}
          FieldListener overlayswitch {command = "*py: setvelocityoverlay()*"}
          FieldListener Magnitude_velocity_viewers.Manual_CSO_edit.BoolArithmetic4.outputChangedToFalse {command = csolistener}
          FieldListener Magnitude_velocity_viewers.Manual_CSO_edit.BoolArithmetic1.outputChangedToFalse {command = csolistener}
          FieldListener Use_variable_FWHM {command = "*py: ctx.module("FWHM_iso_value_calculation").field("Arithmetic06.arg2X").setValue(0.5)*"}
          
          
          Horizontal{
            Box Arithmetic{
              Horizontal{RadioButtonGroup velocity_component{
                  items {
                    item 1{title = "Maximum"}
                    item 2 {title = "Mean"}
                  }
                }
              }
            
            }
            Button {command = propagate title = "Propagate" dependsOn = Magnitude_velocity_viewers.BoolArithmetic.negatedOutputBool}
          }
          Box "Multi Planar Reconstruction"{ maxh = 400 
            TabView {  
              //currentIndexField = Magnitude_velocity_viewers.BoolInt1.intValue
              TabViewItem Magnitude{
                Horizontal{
                  Panel{module = Magnitude_velocity_viewers.MPR_magnitude}               
                }
              }
             
              TabViewItem Velocity{
                Panel{module = Magnitude_velocity_viewers.MPR_velocity_ROI}
              }       
            }  
          }
          Box "Velocity (profile)"{
            TabView {
              currentIndexField = currenttabplots
              TabViewItem "Current slice"{         
                MatplotlibCanvas {
                  w       = 500
                  h       = 325
                  expandX = yes
                  expandY = yes
        
                  name       = canvas    
                  useToolBar = False
                } expandY = True
              }
              TabViewItem "All slices"  { 
                MatplotlibCanvas {
                  w       = 500
                  h       = 325
                  expandX = yes
                  expandY = yes
  
                  name       = canvas_allslices  
                  useToolBar = False
                }
              }
              FieldListener currenttabplots {command = "*py: plot_velocity_curve();plot_all_slice_velocities()*"}   
            }
          }


        }
      }expandY=True
      FieldListener currenttab {command =  "*py: plot_velocity_curve();plot_all_slice_velocities();get_all_slice_values();get_anatomical_locations();set_anatomical_locations()*"} 
      FieldListener leftright {command = set_anatomical_locations}
      FieldListener Cname {command = set_anatomical_locations}
      
    }
    Category Save{tabDependsOn = "* Magnitude_velocity_viewers.CSO_creation.output0  && Render_Centerline.ImagePropertyConvert3.output0 *"
      Field fileName { title = "File Name:" browseMode = Save browseButton = Yes}
      Button {title = Save command = save_results}
      TextView Warning {edit = No title="" maxh=40}
    } 
  }
}

Window experimentaloptions{
  title = "Experimental options for 4D PCA image data, by Kees van Hespen, UMC Utrecht (C)"
  Category{
    Horizontal { visibleOn = !BoolArithmetic.inputBool2 Label "Set non-vessel intensity threshold: " {}
      NumberEdit Render_Centerline.IntervalThreshold.threshMin {

      }
    } 
    Horizontal { visibleOn = BoolArithmetic.inputBool2 Label "Set non-vessel intensity threshold: " {}
      NumberEdit Render_Centerline.IntervalThreshold3.threshMin {
        
      }
    } 
    Horizontal { Label "Set FOV (mm): " {}
      NumberEdit DTF_path_and_MPR.MPRPath4.fieldOfView{

      }
    } 
    Horizontal {  Label "Set DTF threshold: " {}
      Slider Render_Centerline.IntervalThreshold2.threshMax {
        direction = horizontal
      }

      NumberEdit Render_Centerline.IntervalThreshold2.threshMax {
        step      = 0.1
        minLength = 6
        format    = "%.3f"
      }
    }
    Horizontal {  Label "FWHM calculation slice window width:(val*2+1) " {}
      NumberEdit FWHM_iso_value_calculation.MirrorSubimage.Width {
        step      = 1
        minLength = 6
      }
    }
    Horizontal {  Label "Centerline smoothing: " {}
      Slider DTF_path_and_MPR.PathToKeyFrame.numSmoothes {
        direction = horizontal
      }

      NumberEdit DTF_path_and_MPR.PathToKeyFrame.numSmoothes {
        step      = 1
        minLength = 6
        format    = "%.1i"
      }
      
    }
    Horizontal {
      CheckBox Use_variable_FWHM {title = "Use variable FWHM"}
      LineEdit FWHM_iso_value_calculation.Arithmetic06.arg2X {visibleOn = Use_variable_FWHM maximumHeight = 50 maximumWidth = 40}
    }
    Button {title = "Debug" command = "*py: ctx.showWindow("consoleoutput"); ctx.field("MLLogFile.enableLog").setValue(True)*"}
  }
}

Window Manualload{title = "Manual loading of 4D PCA image data, by Kees van Hespen, UMC Utrecht (C)"
  minimumWidth = 800
  Category{   
    Box "MFFE RL:" {
      layout = Horizontal
      Field manual_mffe1 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "MFFE AP:" {
      layout = Horizontal
      Field manual_mffe2 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "MFFE FH:" {
      layout = Horizontal
      Field manual_mffe3 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "MPCA RL:" {
      layout = Horizontal
      Field manual_mpca1 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "MPCA AP:" {
      layout = Horizontal
      Field manual_mpca2 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "MPCA FH:" {
      layout = Horizontal
      Field manual_mpca3 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "PPCA RL:" {
      layout = Horizontal
      Field manual_ppca1 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "PPCA AP:" {
      layout = Horizontal
      Field manual_ppca2 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Box "PPCA FH:" {
      layout = Horizontal
      Field manual_ppca3 {
        title        = Path:
        browseButton = yes
        browseMode   = open
      }
    } 
    Button {title = "Load manual dicoms" dependsOn  = @@ manual_mffe1 && manual_mffe2 && manual_mffe3 && manual_ppca1 && manual_ppca2 && manual_ppca3 @@ command = "*py: ctx.field("FileInformation1.path").setValue(ctx.field("manual_ppca1").value);  manual_load(); *" }
    
    
  }
}

Window consoleoutput {title = "Console output, by Kees van Hespen, UMC Utrecht (C)"
  shouldCloseCommand = "*py: ctx.field("MLLogFile.enableLog").setValue(False)*"
  Category  {
    expandY = True
    TextView Console.consoleString {title = ""}
  }
}
// 

Window Draw{Category{
  
    Field ImageLoad6.filename {title = "Load T1W" browseButton = True browseMode = open}
    Panel {module = OrthoView2D  expandY = True}expandY = True
    Horizontal{ expandY = False
      Button DrawVoxels3D1.clear {}
      Button UndoManager.undo {}
      Field DrawVoxels3D1.drawMode {}
      Field DrawVoxels3D1.drawSize {}
      Button {title = "Save" command = "*py: ctx.field("itkImageFileWriter.save").touch(); ctx.field("Counter.autoStep").setValue(True); ctx.field("savetext").setValue("Mask saved")*"}
      TextView savetext{title = "" maxh = 30 edit = False}
      FieldListener Counter.currentValue {command = "*py: if ctx.field("Counter.currentValue").value==3: ctx.field("Counter.autoStep").setValue(False); ctx.field("Counter.reset").touch(); ctx.field("savetext").setValue("") *"}
      FieldListener DirectDicomImport3.source {command = "*py: ctx.field("DirectDicomImport3.dplImport").touch()*"}       
    }
  }
}

  
Commands {
  source      = $(LOCAL_BASENAME).py
  initCommand = init

}